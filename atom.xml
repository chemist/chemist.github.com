<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Chemist's Blog]]></title>
  <link href="http://chemist.github.com/atom.xml" rel="self"/>
  <link href="http://chemist.github.com/"/>
  <updated>2014-01-17T00:55:05+04:00</updated>
  <id>http://chemist.github.com/</id>
  <author>
    <name><![CDATA[Smirnov Alexey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Юмор]]></title>
    <link href="http://chemist.github.com/blog/2014/01/16/iumor/"/>
    <updated>2014-01-16T22:29:00+04:00</updated>
    <id>http://chemist.github.com/blog/2014/01/16/iumor</id>
    <content type="html"><![CDATA[<h1>Окончательное решение непонятных вопросов:</h1>

<h2>Хаскель</h2>

<p><img class="[photo]" src="../images/haskell.jpg" title="[640] [480] [haskell cat]" >
Кота зовут Хаскель, порода мэйнкун, вес от 8 до 9,5 килограммов, возраст полтора года.</p>

<h2>Монада</h2>

<p><img class="[photo]" src="../images/monad.jpg" title="[640] [480] [cafe monada]" >
Кафе в селе Поляна (Свалявский район, Закарпатье), откуда взялось название никто не знает.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update: Морфология]]></title>
    <link href="http://chemist.github.com/blog/2013/07/31/update-morfologhiia/"/>
    <updated>2013-07-31T23:38:00+04:00</updated>
    <id>http://chemist.github.com/blog/2013/07/31/update-morfologhiia</id>
    <content type="html"><![CDATA[<p>Добрались руки и набросал новую версию морфологии.
Теперь в качестве структуры для хранения словаря используется направленный ациклический граф (DAWG).
Исходные данные для словаря теперь берутся из <a href="http://opencorpora.org/dict.php">opencorpora</a>.
Собственно от морфологии там только запакованный словарь, тривиальная вебморда для тестирования, парсер + код для упаковки в dawg ну и наверное все.
Поиск по словарю с выводом форм слов работает нормально, но нужно добавить предсказатель для тех слов что отсутствуют в словаре.
API пока отсутствует как класс, немного позже добавлю все эти штуки.
Вдобавок есть мысль прикрутить прослойку в виде сетевого сервиса с протоколом по типу memcache.</p>

<p>Бинарь словаря пока не прилагаю, 15 мегабайт с репы дергать постоянно не камильфо.
Если у кого есть желание поиграться отпишите в коментах, либо соберите сами</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://opencorpora.org/files/export/dict/dict.opcorpora.txt.bz2
</span><span class='line'>unpack dict.opcorpora.txt.bz2 
</span><span class='line'>ghc -hide-package vector-binary-instances -O2 BuildDict.hs -o builder
</span><span class='line'>./builder</span></code></pre></td></tr></table></div></figure>


<p>Минут за 15 - 20 и 2 гигабайта памяти с копейками, сие диво дивное родит несколько бинарных файлов,
оставить dawg.dict, в нем словарь, остальное можно удалять.
Далее скомпилировать Main.hs и запускать с той-же папки.
Доступно на локалхосте по 8000 порту.</p>

<p>Как то так.
И да если ктонить ткнет носом как оптимизировать Builder.hs чтоб он кушал меньше памяти буду сильно признателен.
Хотя памяти у меня достаточно + есть еще толстая свободная подушка, но неприятно.</p>

<p>Когда в очередной раз мне надоест пилить радио streaming сервер, доделаю морфологию до нормального состояния.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Морфология]]></title>
    <link href="http://chemist.github.com/blog/2013/03/03/morfologhiia/"/>
    <updated>2013-03-03T16:27:00+04:00</updated>
    <id>http://chemist.github.com/blog/2013/03/03/morfologhiia</id>
    <content type="html"><![CDATA[<h2>Предыстория</h2>

<p>Год назад, для одного из проектов мне понадобилась морфология, google и yandex вариантов для haskell не нашли.
Немного изучив предметную область, написал свой упрощенный вариант морфологии.</p>

<!-- more -->


<h2>Описание</h2>

<p>Словарь взял из  <a href="http://pythonhosted.org/pymorphy/">pymorphy</a>, из функционала присутствует только нормализация, все остальное мне было не нужно.</p>

<p>Пример использования:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">Main</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nn">Text.Morphology.Russian</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Data.Text</span> <span class="p">(</span><span class="nf">pack</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- | import modules for show cyrillic in console</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Data.ByteString.Char8</span> <span class="p">(</span><span class="nf">putStrLn</span><span class="p">)</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Data.Text.Encoding</span> <span class="p">(</span><span class="nf">encodeUtf8</span><span class="p">)</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Prelude</span> <span class="k">hiding</span> <span class="p">(</span><span class="nf">putStrLn</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">main</span><span class="ow">::</span><span class="kt">IO</span> <span class="nb">()</span>
</span><span class='line'><span class="nf">main</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- | recreate binary file with morphology base, if you realy need this</span>
</span><span class='line'><span class="c1">-- |  makeMorph</span>
</span><span class='line'><span class="c1">-- | create morph.bin file in in data_dir </span>
</span><span class='line'><span class="c1">-- | about data_dir see here  [about data_dir](http://neilmitchell.blogspot.ru/2008/02/adding-data-files-using-cabal.html)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- | load binary file from data_dir, and return IO Morph</span>
</span><span class='line'>  <span class="n">normal</span> <span class="ow">&lt;-</span> <span class="n">normalForm</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">let</span> <span class="n">check</span> <span class="ow">=</span> <span class="n">normal</span> <span class="p">(</span><span class="n">pack</span> <span class="s">&quot;есть&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">mapM_</span> <span class="n">putStrLn</span> <span class="o">$</span> <span class="n">map</span> <span class="n">encodeUtf8</span> <span class="n">check</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">check</span> <span class="ow">=</span> <span class="n">normal</span> <span class="p">(</span><span class="n">pack</span> <span class="s">&quot;ржи&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">mapM_</span> <span class="n">putStrLn</span> <span class="o">$</span> <span class="n">map</span> <span class="n">encodeUtf8</span> <span class="n">check</span>
</span></code></pre></td></tr></table></div></figure>


<p>В результате:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="o">&gt;</span> <span class="kt">:</span><span class="n">l</span> <span class="kt">Main</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">main</span>
</span><span class='line'><span class="err">быть</span>
</span><span class='line'><span class="err">есть</span>
</span><span class='line'><span class="err">есть</span>
</span><span class='line'><span class="err">рожь</span>
</span><span class='line'><span class="err">ржа</span>
</span><span class='line'><span class="err">ржать</span>
</span></code></pre></td></tr></table></div></figure>


<p>Если нормальной формы не найденно возвращается пустой список.</p>

<p>Результат по ссылке <a href="http://github.com/chemist/russian-morphology">russian-morphology</a></p>

<p>Установка как для любого cabal пакета.</p>

<h2>Мысли вслух:</h2>

<p>По хорошему нужно переписать используя <a href="http://en.wikipedia.org/wiki/Directed_acyclic_word_graph">DAWG</a>, в качестве хранилища для лемм и прочего + реализовать полный функционал.</p>
]]></content>
  </entry>
  
</feed>
