<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Haskell | Chemist's Blog]]></title>
  <link href="http://chemist.github.com/blog/categories/haskell/atom.xml" rel="self"/>
  <link href="http://chemist.github.com/"/>
  <updated>2014-01-17T01:00:48+04:00</updated>
  <id>http://chemist.github.com/</id>
  <author>
    <name><![CDATA[Smirnov Alexey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Update: Морфология]]></title>
    <link href="http://chemist.github.com/blog/2013/07/31/update-morfologhiia/"/>
    <updated>2013-07-31T23:38:00+04:00</updated>
    <id>http://chemist.github.com/blog/2013/07/31/update-morfologhiia</id>
    <content type="html"><![CDATA[<p>Добрались руки и набросал новую версию морфологии.
Теперь в качестве структуры для хранения словаря используется направленный ациклический граф (DAWG).
Исходные данные для словаря теперь берутся из <a href="http://opencorpora.org/dict.php">opencorpora</a>.
Собственно от морфологии там только запакованный словарь, тривиальная вебморда для тестирования, парсер + код для упаковки в dawg ну и наверное все.
Поиск по словарю с выводом форм слов работает нормально, но нужно добавить предсказатель для тех слов что отсутствуют в словаре.
API пока отсутствует как класс, немного позже добавлю все эти штуки.
Вдобавок есть мысль прикрутить прослойку в виде сетевого сервиса с протоколом по типу memcache.</p>

<p>Бинарь словаря пока не прилагаю, 15 мегабайт с репы дергать постоянно не камильфо.
Если у кого есть желание поиграться отпишите в коментах, либо соберите сами</p>

<p><code>
wget http://opencorpora.org/files/export/dict/dict.opcorpora.txt.bz2
unpack dict.opcorpora.txt.bz2
ghc -hide-package vector-binary-instances -O2 BuildDict.hs -o builder
./builder
</code>
Минут за 15 - 20 и 2 гигабайта памяти с копейками, сие диво дивное родит несколько бинарных файлов,
оставить dawg.dict, в нем словарь, остальное можно удалять.
Далее скомпилировать Main.hs и запускать с той-же папки.
Доступно на локалхосте по 8000 порту.</p>

<p>Как то так.
И да если ктонить ткнет носом как оптимизировать Builder.hs чтоб он кушал меньше памяти буду сильно признателен.
Хотя памяти у меня достаточно + есть еще толстая свободная подушка, но неприятно.</p>

<p>Когда в очередной раз мне надоест пилить радио streaming сервер, доделаю морфологию до нормального состояния.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Морфология]]></title>
    <link href="http://chemist.github.com/blog/2013/03/03/morfologhiia/"/>
    <updated>2013-03-03T16:27:00+04:00</updated>
    <id>http://chemist.github.com/blog/2013/03/03/morfologhiia</id>
    <content type="html"><![CDATA[<h2>Предыстория</h2>

<p>Год назад, для одного из проектов мне понадобилась морфология, google и yandex вариантов для haskell не нашли.
Немного изучив предметную область, написал свой упрощенный вариант морфологии.</p>

<!-- more -->


<h2>Описание</h2>

<p>Словарь взял из  <a href="http://pythonhosted.org/pymorphy/">pymorphy</a>, из функционала присутствует только нормализация, все остальное мне было не нужно.</p>

<p>Пример использования:
``` haskell
module Main where</p>

<p>import Text.Morphology.Russian
import Data.Text (pack)</p>

<p>-- | import modules for show cyrillic in console
import Data.ByteString.Char8 (putStrLn)
import Data.Text.Encoding (encodeUtf8)
import Prelude hiding (putStrLn)</p>

<p>main::IO ()
main = do</p>

<p>-- | recreate binary file with morphology base, if you realy need this
-- |  makeMorph
-- | create morph.bin file in in data_dir
-- | about data_dir see here  <a href="http://neilmitchell.blogspot.ru/2008/02/adding-data-files-using-cabal.html">about data_dir</a></p>

<p>-- | load binary file from data_dir, and return IO Morph
  normal &lt;- normalForm</p>

<p>  let check = normal (pack "есть")
  mapM<em> putStrLn $ map encodeUtf8 check
  let check = normal (pack "ржи")
  mapM</em> putStrLn $ map encodeUtf8 check</p>

<p>```</p>

<p>В результате:
```</p>

<blockquote><p>:l Main
main
быть
есть
есть
рожь
ржа
ржать
```
Если нормальной формы не найденно возвращается пустой список.</p></blockquote>

<p>Результат по ссылке <a href="http://github.com/chemist/russian-morphology">russian-morphology</a></p>

<p>Установка как для любого cabal пакета.</p>

<h2>Мысли вслух:</h2>

<p>По хорошему нужно переписать используя <a href="http://en.wikipedia.org/wiki/Directed_acyclic_word_graph">DAWG</a>, в качестве хранилища для лемм и прочего + реализовать полный функционал.</p>
]]></content>
  </entry>
  
</feed>
